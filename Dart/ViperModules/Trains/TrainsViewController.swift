//
//  TrainsViewController.swift
//  Dart
//
//  Created by Tomislav Luketic on 30/06/2020.
//  Copyright (c) 2020 lux. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class TrainsViewController: UIViewController {

  // MARK: - Public properties -
  @IBOutlet weak var tableView: UITableView!
  @IBOutlet weak var directionsSegmentedControl: UISegmentedControl!

  @IBOutlet var segmentedControlCenterXConstraint: NSLayoutConstraint!
  
  var presenter: TrainsPresenterInterface!

  // MARK: - Lifecycle -

  override func viewDidLoad() {
    super.viewDidLoad()
    presenter.getCurrentTrains()
    setupView()
    addRefreshButton()
    
  }
  
 override func viewDidLayoutSubviews() {
    super.viewDidLayoutSubviews()
    segmentedControlCenterXConstraint.priority = (view.bounds.width - directionsSegmentedControl.intrinsicContentSize.width) >= 0 ? .defaultHigh : .fittingSizeLevel
  }
  
  private func setupView() {
    directionsSegmentedControl.removeAllSegments()
    navigationItem.title = "Trains"
    tableView.tableFooterView = UIView()
    tableView.dataSource = self
    tableView.delegate = self
  }
  
  private func addRefreshButton() {
     let button = UIBarButtonItem(barButtonSystemItem: .refresh, target: self, action: #selector(onRefresh))
     navigationItem.rightBarButtonItem = button
   }
   
   private func createSegmentsForTrains(directions: [String]) {
     directionsSegmentedControl.removeAllSegments()
     directions.forEach { directionsSegmentedControl.insertSegment(withTitle: $0, at: directionsSegmentedControl.numberOfSegments, animated: false) }
     directionsSegmentedControl.selectedSegmentIndex = directionsSegmentedControl.numberOfSegments > 0 ? 0 : -1
     view.layoutIfNeeded()
   }
  
  @objc func onRefresh() {
    presenter.getCurrentTrains()
  }
  
  @IBAction func onDirectionChanged(_ sender: UISegmentedControl) {
    presenter.directionChanged(index: sender.selectedSegmentIndex)
  }
	
}

// MARK: - Extensions -

extension TrainsViewController: UITableViewDataSource {
  
  func numberOfSections(in tableView: UITableView) -> Int {
    return presenter.filteredTrains.count
  }
  
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return presenter.filteredTrains[section].trains.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = UITableViewCell()
    cell.textLabel?.numberOfLines = 0
    cell.textLabel?.textAlignment = .center
    let train = presenter.filteredTrains[indexPath.section].trains[indexPath.row]
    cell.textLabel?.text = train.PublicMessage.replacingOccurrences(of: "\\n", with: " ")
    return cell
  }
}

extension TrainsViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
    return presenter.filteredTrains[section].direction
  }
  
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    presenter.trainSelected(at: indexPath)
  }

}

extension TrainsViewController: TrainsViewInterface {
  func trainsDataChanged(containing directions: [String]) {
    createSegmentsForTrains(directions: directions)
  }
  
  func refreshTrains() {
    tableView.reloadData()
  }
}
