//
//  HomeViewController.swift
//  Dart
//
//  Created by Tomislav Luketic on 27/06/2020.
//  Copyright (c) 2020 lux. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class HomeViewController: UIViewController {

  // MARK: - Public properties -
  @IBOutlet weak var tableView: UITableView!
  @IBOutlet weak var directionsSegmentedControl: UISegmentedControl!
  @IBOutlet weak var scrollView: UIScrollView!
  @IBOutlet var segmentedControlCenterXConstraint: NSLayoutConstraint!
  
  var presenter: HomePresenterInterface!
  private var searchController: UISearchController!
  
  // MARK: - Private properties -
  private var resultsTableController: ListViewController!

  // MARK: - Lifecycle -

  override func viewDidLoad() {
    super.viewDidLoad()
    presenter.getAllStations(type: nil)
    setupView()
  }
  
  override func viewDidLayoutSubviews() {
    super.viewDidLayoutSubviews()
    segmentedControlCenterXConstraint.priority = (view.bounds.width - directionsSegmentedControl.intrinsicContentSize.width) >= 0 ? .defaultHigh : .fittingSizeLevel
  }
  
  required init?(coder: NSCoder) {
    super.init(coder: coder)
  }
  
  private func setupView() {
    directionsSegmentedControl.removeAllSegments()
    setupTableView()
    addSearchController()
    addRefreshButton()
  }
  
  private func setupTableView() {
    tableView.tableFooterView = UIView()
    tableView.dataSource = self
    tableView.delegate = self
  }
  
  private func addSearchController() {
    resultsTableController = storyboard?.instantiateViewController(withIdentifier: "ListViewController") as? ListViewController
    resultsTableController.presenter = presenter
    resultsTableController.tableView.delegate = self
    searchController = UISearchController(searchResultsController: resultsTableController)
    searchController.obscuresBackgroundDuringPresentation = false
    searchController.searchBar.placeholder = "Search train stations"
    searchController.searchResultsUpdater = self
    searchController.searchBar.scopeButtonTitles = StationType.allCases.map { $0.rawValue.capitalized }
    searchController.searchBar.delegate = self
    navigationItem.searchController = searchController
    definesPresentationContext = true
    navigationItem.hidesSearchBarWhenScrolling = false
  }
  
  private func addRefreshButton() {
    let button = UIBarButtonItem(barButtonSystemItem: .refresh, target: self, action: #selector(onRefresh))
    navigationItem.rightBarButtonItem = button
  }
  
  private func createSegmentsForStation(directions: [String]) {
    directionsSegmentedControl.removeAllSegments()
    directions.forEach { directionsSegmentedControl.insertSegment(withTitle: $0, at: directionsSegmentedControl.numberOfSegments, animated: false) }
    directionsSegmentedControl.selectedSegmentIndex = directionsSegmentedControl.numberOfSegments > 0 ? 0 : -1
    view.layoutIfNeeded()
  }
  
  @IBAction func onDirectionChanged(_ sender: UISegmentedControl) {
    presenter.directionChanged(index: sender.selectedSegmentIndex)
  }
  
  @objc func onRefresh() {
    if let selectedStation = presenter.selectedStation {
      presenter.getStationData(by: selectedStation.StationCode)
    }
  }
}

// MARK: - Extensions -

extension HomeViewController: UITableViewDataSource {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return presenter.filteredStationsData.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    guard
      let cell = tableView.dequeueReusableCell(withIdentifier: "StationDataCell") as? StationDataCell
      else { preconditionFailure("Can't dequeue cell with `StationDataCell` identifier") }
    
    let stationsData = presenter.filteredStationsData[indexPath.row]
    cell.configure(with: stationsData)
    return cell
  }
  
}

extension HomeViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    if tableView === self.tableView {
      presenter.trainSelected(at: indexPath.row)
    } else {
      presenter.stationSelected(at: indexPath.row)
      searchController.searchBar.resignFirstResponder()
      searchController.isActive = false
    }
  }
}

extension HomeViewController: HomeViewInterface {
  func reloadStations() {
    resultsTableController.tableView.reloadData()
  }
  
  func selectedStationChanged() {
    navigationItem.title = presenter.selectedStation?.StationDesc ?? ""
  }
  
  func reloadStationsData() {
    tableView.reloadData()
  }
  
  func stationsDataChanged(containing directions: [String]) {
    createSegmentsForStation(directions: directions)
  }
}

extension HomeViewController: UISearchBarDelegate {
  func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
    searchBar.resignFirstResponder()
  }
  
  func searchBar(_ searchBar: UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Int) {
    presenter.getAllStations(type: selectedScope == 0 ? nil : String(StationType.allCases[selectedScope].rawValue.first!))
  }
}

extension HomeViewController: UISearchResultsUpdating {
  func updateSearchResults(for searchController: UISearchController) {
    searchController.searchResultsController?.view.isHidden = false
    presenter.filterStations(text: searchController.searchBar.text)
  }
}
